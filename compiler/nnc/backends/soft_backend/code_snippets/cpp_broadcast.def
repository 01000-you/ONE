/*
 * Copyright (c) 2020 Samsung Electronics Co., Ltd. All Rights Reserved
 * Copyright 2018 The TensorFlow Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

template <int N>
inline void NdArrayDescForBroadcast(const RuntimeShape &input_shape,
                                    const RuntimeShape &output_shape, NdArrayDesc<N> *desc_out)
{
  TFLITE_DCHECK(desc_out != nullptr);

  auto extended_input_shape = RuntimeShape::ExtendedShape(N, input_shape);
  auto extended_output_shape = RuntimeShape::ExtendedShape(N, output_shape);

  int desc_stride = 1;
  for (int i = N - 1; i >= 0; --i)
  {
    desc_out->extents[i] = extended_input_shape.Dims(i);
    desc_out->strides[i] = desc_stride;
    desc_stride *= extended_input_shape.Dims(i);
  }

  for (int i = 0; i < N; ++i)
  {
    const int extent0 = extended_input_shape.Dims(i);
    const int extent1 = extended_output_shape.Dims(i);
    if (extent0 != extent1)
    {
      TFLITE_DCHECK_EQ(extent0, 1);
      desc_out->strides[i] = 0;
      desc_out->extents[i] = extent1;
    }
  }
}

void Broadcast4DSlow(const RuntimeShape &input_shape, const float *input_data,
                     const RuntimeShape &output_shape, float *output_data)
{
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), 4);
  const RuntimeShape extended_output_shape = RuntimeShape::ExtendedShape(4, output_shape);

  NdArrayDesc<4> desc;
  NdArrayDescForBroadcast(input_shape, output_shape, &desc);

  for (int b = 0; b < extended_output_shape.Dims(0); ++b)
  {
    for (int y = 0; y < extended_output_shape.Dims(1); ++y)
    {
      for (int x = 0; x < extended_output_shape.Dims(2); ++x)
      {
        for (int c = 0; c < extended_output_shape.Dims(3); ++c)
        {
          auto out_idx = Offset(extended_output_shape, b, y, x, c);
          auto in_idx = SubscriptToIndex(desc, b, y, x, c);
          output_data[out_idx] = input_data[in_idx];
        }
      }
    }
  }
}
